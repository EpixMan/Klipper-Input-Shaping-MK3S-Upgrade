# WARNING: DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING

#Start of Charmin's additions:

# Print Start
[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
    M140 S{BED_TEMP}     ; Start bed heating
    M104 S{EXTRUDER_TEMP * 0.5}     ; Begin heating extruder but avoid melting temps by heating only 50%
    SET_GCODE_OFFSET Z=0.0    ; Reset the G-Code Z offset
    BED_MESH_CLEAR    ; Clear bed mesh
    G28    ; Home the printer
    G90    ; Absolute positioning mode
    G0 X{printer.toolhead.axis_minimum.x + 3} Y{printer.toolhead.axis_minimum.y + 3} Z50 F{250 * 60}    ; Park at front corner
    M190 S{BED_TEMP}    ; Wait for bed to fully heat
    G28    ; Home the printer
    G0 X125 ; Move to center of bed
    G0 Y125 ; Move to center of bed
    G0 Z0.1 ; Move to center of bed
    M106 S0 ; Disable Fan
    G4 P60000 ; Heat soak bed for 45 seconds
    BED_MESH_CALIBRATE
    M104 S{EXTRUDER_TEMP}    ; Start heating extruder to final temp
    #G0 Z50
    #SMART_PARK ; Can use this if you install KAMP
    M109 S{EXTRUDER_TEMP}    ; Fully heat extruder
    PRUSA_LINE_PURGE #See below
    #LINE_PURGE  ; Can use this if you install KAMP 
    #SKEW_PROFILE LOAD=CaliFlower


# Print End
[gcode_macro PRINT_END]
gcode:
    #SET_SKEW CLEAR=1
    _TOOLHEAD_PARK_PAUSE_CANCEL    ; Park
    M84    ; Disable steppers
    TURN_OFF_HEATERS    ; Disable heaters
    M106 S0     ; Disable fans
    BED_MESH_CLEAR    ; Clear bed mesh




[gcode_macro PRUSA_LINE_PURGE]
## Purge line macro that replicates PrusaSlicer's default purge line
gcode:
G1 Z0.2 F720
G1 Y-3 F1000 ; go outside print area
G92 E0
G1 X60 E9 F1000 ; intro line
G1 X100 E12.5 F1000 ; intro line
G92 E0



#Mechanical Gantry Adjustment from here, as of 2/17/2024: https://github.com/strayr/strayr-k-macros/blob/main/mechanical_level_tmc2209.cfg

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode:
    ### SET THIS DEFAULT CARFULLY - start really low
    {% set my_current = params.CURRENT|default(0.12)|float %} ; adjust crash current on the fly :D
    ###
    {% set oldcurrent = printer.configfile.settings["tmc2130 stepper_z"].run_current %} ; TODO: Find runtime current settings
    {% set oldhold = printer.configfile.settings["tmc2130 stepper_z"].hold_current %} 
    {% set x_max = printer.toolhead.axis_maximum.x %} 
    {% set y_max = printer.toolhead.axis_maximum.y %} 
    {% set z_max = printer.toolhead.axis_maximum.z %} 
    {% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
    {% set fast_move = printer.configfile.settings["printer"].max_velocity %}
    M117 {printer.homed_axes}
    {% if printer.homed_axes != 'xyz' %}
        G28							#Home All Axes
    {% endif %}
    G90 ; absolute
    G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 } ;put toolhead in the center of the gantry

    G0 Z{z_max -1} F{fast_move_z * 60 } ; go to the Z-max at speed max z speed
    
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current} ; drop current on Z stepper
    
    #{% if printer.configfile.settings["stepper_z1"] %} ; test for dual Z
        SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current} ; drop current
    #{% endif %}

    G4 P200 ; Probably not necessary, it is here just for sure

    SET_KINEMATIC_POSITION Z={z_max - 22} ; Trick printer into beleiving the gantry is 12mm lower than it is

    G1 Z{z_max -2} F{6 * 60} ; try to move 10mm up
    G4 P200 ; wait
    G1 Z{z_max -6} F{6 * 60} ; move 4mm down
    G4 P200 ; same as the first one
    
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}

    #{% if printer.configfile.settings["stepper_z1"] %} ; test for dual Z
        SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold} ; reset current
    #{% endif %}

    G1 Z{z_max -30} F{6 * 60} ; move to 30mm below z-max to allow homing movement

    G4 P200 ; same as the first one
    G28 Z ; we MUST home again as the ganty is really in the wrong place.

[gcode_macro G34]
gcode:
    MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: G34 Gantry Level
gcode:
    G34

[force_move]
enable_force_move: true ; enable FORCE_MOVE and SET_KINEMATIC_POSITION



## Macros below obtained from origina dz0ny repository

[gcode_macro M486]
gcode:
    CLEAR_PAUSE

[gcode_macro G80]
gcode:
    M117 Bed leveling
    BED_MESH_CALIBRATE
    G1 X0 Y0 Z0.4 F4000
    M117
    M400

[gcode_macro G81]
gcode:
 BED_MESH_OUTPUT
 
[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M109 S{params.TEMP|default(220, true)}
  {% endif %}
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0
  M117 Unloading filament...
  G92 E0.0
  G91
  #G1 E-45 F5000 #Original dz0ny unload, a bit fast and lacks a ram.
  #G1 E-15 F1000
  #G1 E-20 F1000
  G1 E5 F400
  G1 E-50 F2000
  G1 E-40 F1000
  #G1 E10 F400  #removing second ram, seems unnecessary.
  #G1 E-40 F1800
  G90
  G92 E0.0
  M400
  M117 Remove Filament Now!
  M300 S300 P1000
  M117 Filament unloaded!
  RESTORE_GCODE_STATE NAME=unload_state
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1

[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
  M117 Heating...
  M109 S{params.TEMP|default(220, true)}
  {% endif %}
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0
  M117 Loading filament...
  # Load the filament into the hotend area.
  G92 E0.0
  G91
  G1 E70 F400
  G1 E40 F100
  G90
  G92 E0.0
  M400
  M117 Filament loaded!
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1
  RESTORE_GCODE_STATE NAME=load_state

[delayed_gcode clear_display]
initial_duration: 0.
gcode:
  M117

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  #SDCARD_RESET_FILE
  # Raise nozzle by 60mm
  G1 Z60 F3000
  G90
  # Disable steppers
  M84
  
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
  CLEAR_PAUSE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

# Prusa's calibrate Z
[gcode_macro Calibrate_Z]
description: Calibrate Z axis
gcode:
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    G1 X20 Y0
    G1 Z{max_z-10} F2000 #Update with Z height.
    FORCE_MOVE STEPPER=stepper_z Distance=20 Velocity=10
    G1 Z{max_z-50} F2000 # Move down
    G28 # Home again

[gcode_macro PREHEAT_PLA]
gcode:
    # Start bed heating
    M140 S60
    # Start nozzle heating
    M104 S200

[gcode_macro PREHEAT_PETG]
gcode:
    # Start bed heating
    M140 S90
    # Start nozzle heating
    M104 S240

[gcode_macro PREHEAT_TPU]
gcode:
    # Start bed heating
    M140 S50
    # Start nozzle heating
    M104 S190

# Color Change
[gcode_macro M600]
description: Color change
gcode:
    {% set X = params.X|default(0)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state
